{"version":3,"sources":["views/SignIn/SignIn.js","views/SelectName/SelectName.js","views/HandleError/HandleError.js","components/Navigation/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["SignIn","useForm","handleSubmit","register","errors","style","display","justifyContent","alignItems","onSubmit","values","console","log","name","ref","required","pattern","value","message","email","validate","username","type","SelectName","data","HandleError","firstName","lastName","Navigation","to","App","basename","process","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"yOAGe,SAASA,IAAU,IAAD,EACYC,cAAnCC,EADuB,EACvBA,aAAcC,EADS,EACTA,SAAUC,EADD,EACCA,OAGhC,OACE,oCACE,yBACEC,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,WAGd,0BAAMC,SAAUP,GAXL,SAAAQ,GAAM,OAAIC,QAAQC,IAAIF,OAY/B,wCACA,2BACEG,KAAK,QACLC,IAAKX,EAAS,CACZY,SAAU,WACVC,QAAS,CACPC,MAAO,4CACPC,QAAS,6BAIdd,EAAOe,OAASf,EAAOe,MAAMD,QAC9B,2CACA,2BACEL,KAAK,WACLC,IAAKX,EAAS,CACZiB,SAAU,SAAAH,GAAK,MAAc,UAAVA,GAAqB,iBAG3Cb,EAAOiB,UAAYjB,EAAOiB,SAASH,QAEpC,4BAAQI,KAAK,UAAb,aCnCK,SAASC,IAAc,IAAD,EACAtB,cAA3BE,EAD2B,EAC3BA,SAAUD,EADiB,EACjBA,aAGlB,OACE,yBACEG,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,WAGd,0BAAMC,SAAUP,GAVH,SAAAsB,GAAI,OAAIb,QAAQC,IAAIY,OAW/B,6CACA,2BAAOX,KAAK,YAAYC,IAAKX,IAC7B,gDAEA,4BAAQU,KAAK,SAASC,IAAKX,GACzB,4BAAQc,MAAM,QAAd,QACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,SAAd,cAEF,4BAAQK,KAAK,UAAb,YCtBO,SAASG,IAAe,IAAD,EACOxB,cAAnCE,EAD4B,EAC5BA,SAAUC,EADkB,EAClBA,OAAQF,EADU,EACVA,aAG1B,OACE,yBACEG,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,WAGd,0BAAMC,SAAUP,GAVH,SAAAQ,GAAM,OAAIC,QAAQC,IAAIF,OAWjC,6CACA,2BAAOG,KAAK,YAAYC,IAAKX,EAAS,CAAEY,UAAU,MACjDX,EAAOsB,WAAa,yBACrB,4CACA,2BAAOb,KAAK,WAAWC,IAAKX,EAAS,CAAEY,UAAU,MAChDX,EAAOuB,UAAY,wBACpB,6BACA,4BAAQL,KAAK,UAAb,YCpBO,SAASM,IACtB,OACE,oCACE,yBACEvB,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,WAGd,4BACE,4BACE,kBAAC,IAAD,CAAMqB,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,gBAAT,gBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,iBAAT,oB,MCFGC,MAbf,WACE,OACE,kBAAC,IAAD,CAAQC,SAAUC,0BAChB,kBAACJ,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,IAAIC,UAAWnC,IACjC,kBAAC,IAAD,CAAOkC,KAAK,eAAeC,UAAWZ,IACtC,kBAAC,IAAD,CAAOW,KAAK,gBAAgBC,UAAWV,OCD3BW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMnC,c","file":"static/js/main.8032dfe7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nexport default function SignIn() {\r\n  const { handleSubmit, register, errors } = useForm();\r\n  const onSubmit = values => console.log(values);\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\"\r\n        }}\r\n      >\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <label>Email</label>\r\n          <input\r\n            name=\"email\"\r\n            ref={register({\r\n              required: \"Required\",\r\n              pattern: {\r\n                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\r\n                message: \"invalid email address\"\r\n              }\r\n            })}\r\n          />\r\n          {errors.email && errors.email.message}\r\n          <label>Username</label>\r\n          <input\r\n            name=\"username\"\r\n            ref={register({\r\n              validate: value => value !== \"admin\" || \"Nice try!\"\r\n            })}\r\n          />\r\n          {errors.username && errors.username.message}\r\n\r\n          <button type=\"submit\">Submit</button>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nexport default function SelectName() {\r\n  const { register, handleSubmit } = useForm();\r\n  const onSubmit = data => console.log(data);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\"\r\n      }}\r\n    >\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <label>First Name</label>\r\n        <input name=\"firstName\" ref={register} />\r\n        <label>Select Gender</label>\r\n\r\n        <select name=\"gender\" ref={register}>\r\n          <option value=\"male\">male</option>\r\n          <option value=\"female\">female</option>\r\n          <option value=\"other\">No Stated</option>\r\n        </select>\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nexport default function HandleError() {\r\n  const { register, errors, handleSubmit } = useForm();\r\n  const onSubmit = values => console.log(values);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\"\r\n      }}\r\n    >\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <label>First Name</label>\r\n        <input name=\"firstName\" ref={register({ required: true })} />\r\n        {errors.firstName && \"First name is required\"}\r\n        <label>Last Name</label>\r\n        <input name=\"lastName\" ref={register({ required: true })} />\r\n        {errors.lastName && \"Last name is required\"}\r\n        <br />\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navigation() {\r\n  return (\r\n    <>\r\n      <nav\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\"\r\n        }}\r\n      >\r\n        <ul>\r\n          <li>\r\n            <Link to=\"/\">Home</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/select-name\">Select Name</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/handle-error\">Handle Error</Link>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { SignIn, SelectName, HandleError } from \"./views\";\r\nimport { Navigation } from \"./components\";\r\nimport \"./mvp.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <Navigation />\r\n      <Switch>\r\n        <Route exact path=\"/\" component={SignIn} />\r\n        <Route path=\"/select-name\" component={SelectName} />\r\n        <Route path=\"/handle-error\" component={HandleError} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}